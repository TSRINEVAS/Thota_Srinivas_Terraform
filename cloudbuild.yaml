options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/vaulted-epigram-457004-c6/secrets/service-account-key/versions/latest
      env: SERVICE_ACCOUNT_KEY

serviceAccount: 'terraformfordevlopment@vaulted-epigram-457004-c6.iam.gserviceaccount.com'

steps:
  # Step 0: Write Service Account Key
  - name: gcr.io/cloud-builders/gcloud
    id: Setup Auth
    entrypoint: sh
    secretEnv: [SERVICE_ACCOUNT_KEY]
    args:
      - -c
      - |
        echo "Writing service account key to file..."
        printf "%s" "$$SERVICE_ACCOUNT_KEY" > key.json
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

  # Step 1: Terraform Init
  - name: hashicorp/terraform:1.5.7
    id: Terraform Init
    entrypoint: sh
    args:
      - -c
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

        echo "Initializing Terraform..."
        terraform init \
          -backend-config="bucket=thotaterra" \
          -backend-config="prefix=terraform/state" \
          -reconfigure

  # Step 2: Terraform Plan (Save to .txt file)
  - name: hashicorp/terraform:1.5.7
    id: Terraform Plan
    entrypoint: sh
    args:
      - -c
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

        echo "Running Terraform Plan..."
        terraform plan -var-file="terraform.tfvars" > terraform_plan_output.txt

  # Step 3: Upload Plan Log to GCS
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: Upload Plan Log to GCS
    entrypoint: sh
    args:
      - -c
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

        echo "Checking if terraform_plan_output.txt exists..."
        if [ -f terraform_plan_output.txt ]; then
          echo "Uploading plan output to GCS bucket with commit SHA..."
          gsutil cp terraform_plan_output.txt gs://thotaterra/terraform-plans/terraform_plan_output-${COMMIT_SHA}.txt
        else
          echo "Plan output file not found! Skipping upload."
          exit 1
        fi

  # Step 4: Terraform Apply
  - name: hashicorp/terraform:1.5.7
    id: Terraform Apply
    entrypoint: sh
    args:
      - -c
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

        echo "Applying Terraform changes..."
        terraform apply -var-file="terraform.tfvars" -auto-approve

  # Step 5: Terraform Output
  - name: hashicorp/terraform:1.5.7
    id: Terraform Output
    entrypoint: sh
    args:
      - -c
      - |
        export GOOGLE_APPLICATION_CREDENTIALS=/workspace/key.json

        echo "Displaying Terraform Outputs..."
        terraform output
